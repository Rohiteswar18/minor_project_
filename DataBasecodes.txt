. Users Table
Stores customer information.

sql
Copy
Edit
CREATE TABLE Users (
    user_id BIGINT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255),
    email VARCHAR(255) UNIQUE,
    phone VARCHAR(15) UNIQUE,
    address TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
2. Products Table
Stores product details available on Instamart.

sql
Copy
Edit
CREATE TABLE Products (
    product_id BIGINT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255),
    category_id BIGINT,
    brand VARCHAR(255),
    price DECIMAL(10,2),
    stock_quantity INT,
    description TEXT,
    image_url TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (category_id) REFERENCES Categories(category_id)
);
3. Categories Table
Categorizes products (e.g., Dairy, Beverages, Snacks, etc.).

sql
Copy
Edit
CREATE TABLE Categories (
    category_id BIGINT PRIMARY KEY AUTO_INCREMENT,
    category_name VARCHAR(255) UNIQUE
);
4. Orders Table
Stores order details.

sql
Copy
Edit
CREATE TABLE Orders (
    order_id BIGINT PRIMARY KEY AUTO_INCREMENT,
    user_id BIGINT,
    total_amount DECIMAL(10,2),
    status ENUM('Pending', 'Processing', 'Out for Delivery', 'Delivered', 'Cancelled'),
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    delivery_time TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);
5. Order_Items Table
Stores products associated with each order.

sql
Copy
Edit
CREATE TABLE Order_Items (
    order_item_id BIGINT PRIMARY KEY AUTO_INCREMENT,
    order_id BIGINT,
    product_id BIGINT,
    quantity INT,
    price DECIMAL(10,2),
    FOREIGN KEY (order_id) REFERENCES Orders(order_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);
6. Inventory Table
Manages stock for real-time inventory tracking.

sql
Copy
Edit
CREATE TABLE Inventory (
    inventory_id BIGINT PRIMARY KEY AUTO_INCREMENT,
    product_id BIGINT,
    warehouse_id BIGINT,
    stock_quantity INT,
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (product_id) REFERENCES Products(product_id),
    FOREIGN KEY (warehouse_id) REFERENCES Warehouses(warehouse_id)
);
7. Warehouses Table
Stores information about warehouse locations.

sql
Copy
Edit
CREATE TABLE Warehouses (
    warehouse_id BIGINT PRIMARY KEY AUTO_INCREMENT,
    location VARCHAR(255),
    capacity INT
);
8. Payments Table
Manages transactions for orders.

sql
Copy
Edit
CREATE TABLE Payments (
    payment_id BIGINT PRIMARY KEY AUTO_INCREMENT,
    order_id BIGINT,
    user_id BIGINT,
    amount DECIMAL(10,2),
    payment_method ENUM('UPI', 'Card', 'Cash on Delivery', 'Wallet'),
    status ENUM('Pending', 'Completed', 'Failed'),
    payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (order_id) REFERENCES Orders(order_id),
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);
9. Delivery_Partners Table
Stores details of delivery agents.

sql
Copy
Edit
CREATE TABLE Delivery_Partners (
    partner_id BIGINT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255),
    phone VARCHAR(15),
    vehicle_number VARCHAR(20),
    availability_status ENUM('Available', 'On Delivery')
);
10. Delivery Table
Tracks delivery status and assigns delivery agents.

sql
Copy
Edit
CREATE TABLE Delivery (
    delivery_id BIGINT PRIMARY KEY AUTO_INCREMENT,
    order_id BIGINT,
    partner_id BIGINT,
    delivery_status ENUM('Pending', 'Picked Up', 'In Transit', 'Delivered'),
    estimated_time TIMESTAMP,
    actual_delivery_time TIMESTAMP,
    FOREIGN KEY (order_id) REFERENCES Orders(order_id),
    FOREIGN KEY (partner_id) REFERENCES Delivery_Partners(partner_id)
);
11. Reviews Table
Stores user feedback on products.

sql
Copy
Edit
CREATE TABLE Reviews (
    review_id BIGINT PRIMARY KEY AUTO_INCREMENT,
    user_id BIGINT,
    product_id BIGINT,
    rating INT CHECK (rating BETWEEN 1 AND 5),
    review_text TEXT,
    review_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES Users(user_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);
